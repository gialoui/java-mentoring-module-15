-- Init database
CREATE SCHEMA IF NOT EXISTS 'module_15';

SET SCHEMA 'module_15';

------------------ STUDENT ----------------------

CREATE TABLE IF NOT EXISTS student
(
    id               int PRIMARY KEY,
    name             varchar(255),
    surname          varchar(255),
    dob              date,
    primary_skill    varchar(255),
    created_datetime timestamp,
    updated_datetime timestamp
);

DROP INDEX IF EXISTS primary_skill_idx;

CREATE INDEX IF NOT EXISTS primary_skill_idx ON student (
	primary_skill
);

INSERT INTO student (
    "id", "name", surname, primary_skill, dob
)
SELECT
	a,
    arrays.firstnames[s.a % ARRAY_LENGTH(arrays.firstnames,1) + 1] AS firstname,    
    arrays.lastnames[s.a % ARRAY_LENGTH(arrays.lastnames,1) + 1] AS surname,
    arrays.primarySkills[s.a % ARRAY_LENGTH(arrays.primarySkills,1) + 1],
	timestamp '2014-01-10 20:00:00' + random() * (timestamp '1970-01-20 20:00:00' - timestamp '2000-01-10 10:00:00') AS dob
FROM  generate_series(1,10000) AS s(a) -- number of names to generate
CROSS JOIN(
    SELECT ARRAY[
    'Adam','Bill','Bob','Calvin','Donald','Dwight','Frank','Fred','George','Howard',
    'James','John','Jacob','Jack','Martin','Matthew','Max','Michael',
    'Paul','Peter','Phil','Roland','Ronald','Samuel','Steve','Theo','Warren','William',
    'Abigail','Alice','Allison','Amanda','Anne','Barbara','Betty','Carol','Cleo','Donna',
    'Jane','Jennifer','Julie','Martha','Mary','Melissa','Patty','Sarah','Simone','Susan'
    ] AS firstnames,
    ARRAY[
        'Matthews','Smith','Jones','Davis','Jacobson','Williams','Donaldson','Maxwell','Peterson','Stevens',
        'Franklin','Washington','Jefferson','Adams','Jackson','Johnson','Lincoln','Grant','Fillmore','Harding','Taft',
        'Truman','Nixon','Ford','Carter','Reagan','Bush','Clinton','Hancock', 'J.','','M.'
    ] AS lastnames,
    ARRAY[
    	'Java-8', 'Java 8', 'Java 11', 'Angular', 'React', 'Digital Marketing', 'Android', 'iOS'
    ] as primarySkills
) AS arrays;

--------------- SUBJECT --------------------

CREATE TABLE IF NOT EXISTS subject
(
    id    int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name  varchar(255),
    tutor varchar(255)
);

INSERT INTO subject (
    "name", tutor
)
VALUES
    ('Art', 'Adam Matthews'),
    ('Geography', 'Allison Smith'),
    ('Literacy', 'Amanda Davis'),
    ('Science', 'William Jacobson'),
    ('Physical Education', 'Betty Donaldson'),
    ('IT', 'Barbara Maxwell'),
    ('Biology', 'Anne Grant');
	
--------------- EXAM RESULT --------------------

CREATE TABLE IF NOT EXISTS exam_result
(
    id         int GENERATED BY DEFAULT AS IDENTITY,
    mark       smallint NOT NULL,
    student_id int,
    subject_id int,
    CONSTRAINT result_to_student_rel FOREIGN KEY (student_id)
        REFERENCES student(id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT result_to_subject_rel FOREIGN KEY (subject_id)
        REFERENCES subject (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)
PARTITION BY RANGE (mark);

DROP INDEX IF EXISTS id_idx;

CREATE INDEX IF NOT EXISTS id_idx ON exam_result (
	id
);

DROP INDEX IF EXISTS mark_idx;

CREATE INDEX IF NOT EXISTS mark_idx ON exam_result (
	mark DESC
);

CREATE TABLE passed_mark PARTITION OF exam_result
FOR VALUES FROM (5) TO (11);

CREATE TABLE not_passed_mark PARTITION OF exam_result
FOR VALUES FROM (0) TO (5);

DO $$ <<generate_exam_result_block>>
DECLARE
	random_score smallint;
BEGIN
   	FOR iStudent in 1..10000 LOOP
		FOR iSubject in 1..5 LOOP
			select trunc(random() * 10 + 1) into random_score;			
			INSERT INTO exam_result (student_id, subject_id, mark)
			VALUES (iStudent, trunc(random() * 7 + 1), random_score);
		END LOOP;
	END LOOP;
END generate_exam_result_block $$;